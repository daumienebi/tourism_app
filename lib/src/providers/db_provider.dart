import 'dart:ffi';

import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';
import 'package:tourisim_app/src/models/visit_place.dart';

class DbProvider{
  static const bd_name = 'tourismdb';
  static const table_name = 'visitplace';
  static final DbProvider instance = DbProvider._init();

  static Database? _database;

  DbProvider._init();

  
  Future<Database> get database async{
    if(_database != null){
      return _database!;
    }

    _database = await _initDB(bd_name);
    return _database!;
  }

  Future<Database> _initDB(String dbName) async{
    final dbPath = await getDatabasesPath();
    final route = join(dbPath,dbName);

    return await openDatabase(route,version: 1,onCreate: _createDB);
  }

  Future _createDB(Database db,int version) async{
    String sql ='''CREATE TABLE "visitplace" (
	              "id"	INTEGER NOT NULL,
	              "name"	TEXT NOT NULL,
	              "description"	TEXT,
	              "latitude"	TEXT NOT NULL,
	              "longitude"	TEXT NOT NULL,
	              PRIMARY KEY("id" AUTOINCREMENT)
              );
    ''';
    //execute the sql sentence to create the database
    await db.execute(sql);
    await db.rawInsert('insert into visitplace (id,name,description,latitude,longitude) values("1","Nigeria","Awon weré kpon be","6.465422","3.406448")');
    await db.rawInsert('insert into visitplace (id,name,description,latitude,longitude) values("2","Spain","Awon weré kpon be","6.465422","3.406448")');
    await db.rawInsert('insert into visitplace (id,name,description,latitude,longitude) values("3","England","Awon weré kpon be","6.465422","3.406448")');
    await db.rawInsert('insert into visitplace (id,name,description,latitude,longitude) values("4","Ghana","Awon weré kpon be","6.465422","3.406448")');
    await db.rawInsert('insert into visitplace (id,name,description,latitude,longitude) values("5","Damian","Awon weré kpon be","6.465422","3.406448")');
  }

  Future close() async{
    final db = await instance.database;
    _database =null;
    //return db.close();
  }

  Future <int> addVisitPlace(VisitPlace visitPlace) async{

    final db = await instance.database;
    final id = await db.insert(table_name, visitPlace.toMap());

    return id; //autogenerated id

  }

  Future <int> deleteVisitPlace(VisitPlace visitPlace) async{

    final db = await instance.database;
    final id = await db.delete(table_name,where: 'id = ?',whereArgs: ['${visitPlace.id}']);

    return id;

  }

  void aa () async{
    final db = await instance.database;
    await db.rawInsert('insert into visitplace (id,name,description,latitude,longitude) values("6","Nigeria","Awon weré kpon be","6.465422","3.406448")');
    await db.rawInsert('insert into visitplace (id,name,description,latitude,longitude) values("7","Spain","Awon weré kpon be","6.465422","3.406448")');
    await db.rawInsert('insert into visitplace (id,name,description,latitude,longitude) values("8","England","Awon weré kpon be","6.465422","3.406448")');
    await db.rawInsert('insert into visitplace (id,name,description,latitude,longitude) values("9","Ghana","Awon weré kpon be","6.465422","3.406448")');
    await db.rawInsert('insert into visitplace (id,name,description,latitude,longitude) values("10","Damian","Awon weré kpon be","6.465422","3.406448")');
  }

  Future <VisitPlace> getVisitPlace(int id) async{
    final db = await instance.database;

    final data = await db.query(table_name,columns: VisitPlaceFields.values,
        where : '${VisitPlaceFields.id} = ?',whereArgs: [id]);

    if(data.isNotEmpty){
      return VisitPlace.fromMap(data.first);
    }else{
      throw Exception('ID $id not found');
    }
  }

  Future <List<String>> getSuggestions() async{
    final db = await instance.database;
    final orderBy = '${VisitPlaceFields.name} ASC';
    final result = await db.query(table_name,orderBy: orderBy);
    List<VisitPlace> auxList = result.map((data) => VisitPlace.fromMap(data)).toList();
    List<String> suggestions = [];
    for( VisitPlace vp in auxList){
      suggestions.add(vp.name);
    }
    return suggestions;
  }

  Future <Set<Marker>> getMarkers() async{
    Set<Marker> markerList = {};
    final db = await instance.database;
    final orderBy = '${VisitPlaceFields.name} ASC';
    final result = await db.query(table_name,orderBy: orderBy);

    List<VisitPlace> places =  result.map((data) => VisitPlace.fromMap(data)).toList();
    for(VisitPlace vp in places){
      markerList.add(Marker(
          markerId: MarkerId(vp.latitude.toString()),
          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueOrange),
          infoWindow: InfoWindow(
            title: vp.name,
            snippet: vp.description
          ),
          position: LatLng(double.parse(vp.latitude),double.parse(vp.longitude))
      ));

      print('${vp.latitude}, ${vp.longitude}');
    }
    return markerList;
  }

  Future <List<VisitPlace>> getAllVisitPlaces() async{
    final db = await instance.database;
    final orderBy = '${VisitPlaceFields.name} ASC';

    //db.query('SELECT * FROM $table_name ORDER BY $orderBy');
    final result = await db.query(table_name,orderBy: orderBy);

    return result.map((data) => VisitPlace.fromMap(data)).toList();
  }

  Future<void> deleteDatabase() async{
    final dbPath = await getDatabasesPath();
    databaseFactory.deleteDatabase(dbPath);
  }

}